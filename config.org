#+TITLE: Emacs Config
#+AUTHOR: Filipe Pedrosa
#+TOC: true
#+DATE: <2021-04-27 Tue>

This is my emacs configuration. Started from the one from Jamie Collison [[https://github.com/jamiecollinson/dotfiles/blob/master/config.org/][on GitHub]].

* Setup

** Configure package sources

Add repositories from which we'll load packages. Using melpa and lastest ORG mode one and latest GNU. Setting =package-enable-at-startup= to =nil= prevents a second package load and slightly improves startup time.

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
  (setq package-archives '(("gnu" . "http://mirrors.163.com/elpa/gnu/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

** Bootstrap use-package

If =use-package= is not installed, install it.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (eval-when-compile (require 'use-package)))
#+END_SRC

By default all packages should be installed from package manager as that's the usual path. This is equivalent to setting =:ensure t= on each call to =use-package=. To disable set =:ensure nil= (this is done automatically for any packages using =:load-path= so shouldn't generally be needed).

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

** Benchmark startup

=benchmark-init= records startup time by package so we can debug. It only records things after it's initialised, so put as early in config as possible.

#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))

  (add-hook 'after-init-hook
            (lambda () (message "loaded in %s" (emacs-init-time))))
#+END_SRC

** Increase garbage collector threshold

The default garbage collection threshold is 800kB, increasing this to 10MB for startup increases speed (from 11.0s -> 9.7s when I tested).

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 10000000)

  ;; Restore after startup
  (add-hook 'after-init-hook
            (lambda ()
              (setq gc-cons-threshold 1000000)
              (message "gc-cons-threshold restored to %S"
                       gc-cons-threshold)))
#+END_SRC

** Make it easy to edit this file

#+BEGIN_SRC emacs-lisp
  (defun find-config ()
    "Edit config.org"
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c I") 'find-config)
#+END_SRC

** Set custom settings to load in own file

This stops emacs adding customised settings to =init.el=. I try to avoid using customize anyway, preferring programmatic control of variables. Creating it as a temporary file effectively disables it (i.e. any changes are session local).

#+BEGIN_SRC emacs-lisp
  (setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC

* Preferences
I prefer lines to wrap.

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC

I don't want the error bell.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Make the =yes or no= prompts shorter.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

A common frustration with new Emacs users is the =filename#= files created. This centralises the backup files created as you edit.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+END_SRC

I usually don't want tabs, if I do I can set this buffer-local to =t=. If I just want one tab then use =C-q= (=quoted-insert=) to insert as a literal.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

* Interface
** Basics

=crux= has useful functions extracted from Emacs Prelude. Set =C-a= to move to the first non-whitespace character on a line, and then to toggle between that and the beginning of the line.

#+BEGIN_SRC emacs-lisp
  (use-package crux
    :bind (("C-a" . crux-move-beginning-of-line)))
#+END_SRC

I *never* want whitespace at the end of lines. Remove it on save.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Evil mode

Evil-mode emulates Vim in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    ;; (evil-mode 1)
    (evil-set-initial-state 'NeoTree 'emacs))
#+END_SRC

Todo: evil leader etc?

** God mode

God-mode is a sort-of alternative to Vim - it's a modal interface to emacs existing commands, so in essence when enabled you don't need to chord Ctrl / Meta. As an example =C-x C-s= (save) becomes =xs=.

#+BEGIN_SRC emacs-lisp
  (use-package god-mode
    :ensure t
    :bind (("<escape>" . god-local-mode)
           ("C-x C-1" . delete-other-windows)
           ("C-x C-2" . split-window-below)
           ("C-x C-3" . split-window-right)
           ("C-x C-0" . delete-window)))

  (defun my-update-cursor ()
    (setq cursor-type (if (or god-local-mode buffer-read-only)
                            'box
                          'bar)))

  (add-hook 'god-mode-enabled-hook 'my-update-cursor)
  (add-hook 'god-mode-disabled-hook 'my-update-cursor)
#+END_SRC

Todo: update =window-divider= on god-mode status?

** Goto last change

Sometimes it's useful to step to the last changes in a buffer.

#+BEGIN_SRC emacs-lisp
  (use-package goto-last-change
    :bind (("C-;" . goto-last-change)))
#+END_SRC

** Command completion

=ivy= is a generic completion framework which uses the minibuffer. Turning on =ivy-mode= enables replacement of lots of built in =ido= functionality.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
      :config
      (ivy-mode t))
#+END_SRC

By default =ivy= starts filters with =^=. I don't normally want that and can easily type it manually when I do.

#+BEGIN_SRC emacs-lisp
  (setq ivy-initial-inputs-alist nil)
#+END_SRC

=counsel= is a collection of =ivy= enhanced versions of common Emacs commands. I haven't bound much as =ivy-mode= takes care of most things.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)))
#+END_SRC

=prescient= sorts and filters candidate lists for avy/counsel.

#+BEGIN_SRC emacs-lisp
  (use-package prescient)
  (use-package ivy-prescient
    :config
    (ivy-prescient-mode t))
#+END_SRC

=swiper= is an =ivy= enhanced version of isearch.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind (("M-s" . counsel-grep-or-swiper)))
#+END_SRC

=hydra= presents menus for =ivy= commands.

#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra)
#+END_SRC

=major-mode-hydra= binds a single key to open a context sensitive hydra based on current major mode. Hydras can be defined in =use-package= definitions via the =:mode-hydra= integration.

#+BEGIN_SRC emacs-lisp
  (use-package major-mode-hydra
    :bind
    ("C-M-SPC" . major-mode-hydra)
    :config
    (major-mode-hydra-define org-mode
      ()
      ("Tools"
       (("l" org-lint "lint")))))
#+END_SRC

** Suggest next key

Suggest next keys to me based on currently entered key combination.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (add-hook 'after-init-hook 'which-key-mode))
#+END_SRC

** Better undo

=undo-tree= visualises undo history as a tree for easy navigation.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer 5
    :config
    (global-undo-tree-mode 1))
#+END_SRC

** Navigation

One of the most important features of an advanced editor is quick text navigation. =avy= lets us jump to any character or line quickly.

#+BEGIN_SRC emacs-lisp
  (use-package avy)
#+END_SRC

=ace-window= lets us navigate between windows in the same way as =avy=. Once activated it has useful sub-modes like =x= to switch into window deletion mode.

#+BEGIN_SRC emacs-lisp
 (use-package ace-window
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

** Easier selection

=expand-region= expands the region around the cursor semantically depending on mode. Hard to describe but a killer feature.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Doom modeline
In cygwin fonts needs to be installed manually

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+END_SRC

** Change title bar style

Set the title bar name to have the filename as well
#+BEGIN_SRC emacs-lisp
  (setq-default frame-title-format
                '(:eval
                  (format "%s@%s: %s %s"
                          (or (file-remote-p default-directory 'user)
                              user-real-login-name)
                          (or (file-remote-p default-directory 'host)
                              system-name)
                          (buffer-name)
                          (cond
                           (buffer-file-truename
                            (concat "(" buffer-file-truename ")"))
                           (dired-directory
                            (concat "{" dired-directory "}"))
                           (t
                            "[no file]")))))
#+END_SRC

* Appearance

Using a version of Panda Theme by Jamie Collison (now on [[https://melpa.org/#/panda-theme][melpa]]!).

#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (load-theme 'dracula t))
#+END_SRC

Set Lucida Console using set face attribute, set

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
  :family "Lucida Console"
  :height 90
  :weight 'normal
  :width 'normal)
#+END_SRC

Add emoji support. This is useful when working with html.

#+BEGIN_SRC emacs-lisp
  (use-package emojify)
#+END_SRC

Add all icons support

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

* Coding
** Programming specific interface improvements

When programming I like my editor to try to help me with keeping parentheses balanced.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC

Highlight parens etc. for improved readability.

#+BEGIN_SRC emacs-lisp
  ;; Enable show parent mode as well
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

Expand parentheses for me.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC

** Autocomplete

TODO

** Git

Magit is an awesome interface to git. Summon it with `C-x g`.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

Display line changes in gutter based on git history. Enable it everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode 't))
#+END_SRC

** Markdown

Markdown support isn't built into Emacs, add it with =markdown-mode=.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** Python

Pyvenv handles virtual environment support.

#+BEGIN_SRC emacs-lisp
  (use-package pyvenv)
#+END_SRC

Black is an opinionated pyton formatter. Install with =pip install black= so the command line tool is available.

#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :config
    (add-hook 'python-mode-hook 'blacken-mode))
#+END_SRC

** C coding

TODO

* Org

I should comment on these more...

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented 'f)
  (setq org-directory "~/org")
  (setq org-special-ctrl-a/e 't)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (define-key global-map "\C-cc" 'org-capture)
  (setq org-src-fontify-natively 't)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
#+END_SRC

Customize appearance.

#+BEGIN_SRC emacs-lisp
  (let*
      ((base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:foreground ,base-font-color)))

    (custom-theme-set-faces 'user
                            `(org-level-8 ((t (,@headline))))
                            `(org-level-7 ((t (,@headline))))
                            `(org-level-6 ((t (,@headline))))
                            `(org-level-5 ((t (,@headline))))
                            `(org-level-4 ((t (,@headline))))
                            `(org-level-3 ((t (,@headline :height 1.3))))
                            `(org-level-2 ((t (,@headline :height 1.3))))
                            `(org-level-1 ((t (,@headline :height 1.3 ))))
                            `(org-document-title ((t (,@headline :height 1))))))
#+END_SRC

* Extras
** Writing

=writegood-mode= highlights bad word choices and has functions for calculating readability.

#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :bind ("C-c g" . writegood-mode)
    :config
    (add-to-list 'writegood-weasel-words "actionable"))
#+END_SRC

[fn:1] I hesitate to say this is the emacs way, it's just what I felt necessary.
